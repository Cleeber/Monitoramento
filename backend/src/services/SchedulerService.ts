import cron from 'node-cron'
import { databaseService } from './DatabaseService.js'
import { reportService } from './ReportService.js'

export class SchedulerService {
  private jobs: Map<string, cron.ScheduledTask> = new Map()
  private isInitialized = false

  /**
   * Inicializa o servi√ßo de agendamento
   */
  async initialize(): Promise<void> {
    if (this.isInitialized) {
      console.log('üìÖ Servi√ßo de agendamento j√° inicializado')
      return
    }

    try {
      console.log('üìÖ Inicializando SchedulerService...')
      
      // Agendar relat√≥rios individuais para cada monitor
      await this.scheduleIndividualMonitorReports()
      
      // Agendar limpeza de logs antigos (opcional)
      this.scheduleLogCleanup()
      
      this.isInitialized = true
      console.log('‚úÖ SchedulerService inicializado com sucesso')
      console.log(`üìã Jobs agendados: ${this.jobs.size}`)
      
      // Listar jobs agendados
      this.jobs.forEach((_, jobName) => {
        console.log(`   - ${jobName}: agendado`)
      })
    } catch (error) {
      console.error('‚ùå Erro ao inicializar servi√ßo de agendamento:', error)
      throw error
    }
  }

  /**
   * Agenda relat√≥rios individuais para cada monitor baseado no hor√°rio configurado
   */
  private async scheduleIndividualMonitorReports(): Promise<void> {
    try {
      // Buscar todos os monitores com configura√ß√£o de relat√≥rio
      const monitors = await databaseService.getMonitors()
      
      for (const monitor of monitors) {
        if (monitor.report_email && monitor.report_send_day && monitor.report_send_time) {
          await this.scheduleMonitorReport(monitor)
        }
      }
      
      console.log(`üìÖ Agendados relat√≥rios para ${this.jobs.size - 1} monitores`) // -1 para excluir o job de limpeza
    } catch (error) {
      console.error('‚ùå Erro ao agendar relat√≥rios individuais:', error)
    }
  }

  /**
   * Agenda relat√≥rio para um monitor espec√≠fico
   */
  private async scheduleMonitorReport(monitor: any): Promise<void> {
    const jobName = `monthly-report-${monitor.id}`
    
    // Remover job existente se houver
    if (this.jobs.has(jobName)) {
      this.jobs.get(jobName)?.stop()
      this.jobs.delete(jobName)
    }
    
    // Extrair hora e minuto do report_send_time (formato HH:MM)
    const [hour, minute] = monitor.report_send_time.split(':')
    const day = monitor.report_send_day
    
    // Criar express√£o cron: minuto hora dia * *
    const cronExpression = `${minute} ${hour} ${day} * *`
    
    const task = cron.schedule(cronExpression, async () => {
      console.log(`üìä Enviando relat√≥rio mensal para monitor: ${monitor.name}`)
      await this.sendMonthlyReportForMonitor(monitor)
    }, {
      scheduled: false,
      timezone: 'America/Sao_Paulo'
    })
    
    this.jobs.set(jobName, task)
    task.start()
    
    console.log(`üìÖ Relat√≥rio agendado para monitor '${monitor.name}' - dia ${day} √†s ${hour}:${minute}`)
  }

  /**
   * Agenda limpeza de logs antigos
   * Executa todo domingo √†s 02:00
   */
  private scheduleLogCleanup(): void {
    const task = cron.schedule('0 2 * * 0', async () => {
      console.log('üßπ Executando limpeza semanal de logs antigos...')
      console.log('üßπ Executando limpeza de logs antigos...')
      await this.cleanupOldLogs()
    }, {
      scheduled: true,
      timezone: 'America/Sao_Paulo'
    })

    this.jobs.set('log-cleanup', task)
    console.log('üìÖ Agendamento de limpeza de logs configurado (02:00 aos domingos)')
  }

  /**
   * Envia relat√≥rio mensal para um monitor espec√≠fico
   */
  private async sendMonthlyReportForMonitor(monitor: any): Promise<void> {
    try {
      const today = new Date()
      const reportMonth = today.getMonth() + 1
      const reportYear = today.getFullYear()
      const todayStr = today.toISOString().split('T')[0] // YYYY-MM-DD
      
      console.log(`üìß Processando relat√≥rio para monitor ${monitor.name} (${monitor.id})`)
      
      // Verificar se j√° foi enviado HOJE (n√£o apenas este m√™s)
      const history = await databaseService.getMonthlyReportHistory({
        monitor_id: monitor.id,
        year: reportYear,
        month: reportMonth,
        limit: 10 // Buscar mais registros para verificar hoje
      })
      
      // Verificar se algum relat√≥rio foi enviado hoje
      const sentToday = history.some((report: any) => {
        const reportDate = new Date(report.sent_at).toISOString().split('T')[0]
        return reportDate === todayStr && report.status === 'sent'
      })
      
      if (sentToday) {
        console.log(`‚è≠Ô∏è Relat√≥rio j√° enviado hoje para monitor ${monitor.name} (${todayStr})`)
        return
      }
      
      try {
        // Gerar e enviar relat√≥rio dinamicamente com dados dos √∫ltimos 30 dias
        await reportService.sendMonthlyReportDynamic(monitor.id, monitor.report_email)
        
        // Registrar no hist√≥rico
        await databaseService.createMonthlyReportHistory({
          monitor_id: monitor.id,
          email: monitor.report_email,
          year: reportYear,
          month: reportMonth,
          report_data: { success: true, sent_at: new Date().toISOString() },
          sent_at: new Date().toISOString(),
          status: 'sent'
        })
        
        console.log(`‚úÖ Relat√≥rio enviado com sucesso para ${monitor.report_email}`)
      } catch (error) {
        console.error(`‚ùå Erro ao enviar relat√≥rio para ${monitor.report_email}:`, error)
        
        // Registrar erro no hist√≥rico
        await databaseService.createMonthlyReportHistory({
          monitor_id: monitor.id,
          email: monitor.report_email,
          year: reportYear,
          month: reportMonth,
          report_data: { success: false, error: error instanceof Error ? error.message : 'Erro desconhecido' },
          sent_at: new Date().toISOString(),
          status: 'failed'
        })
      }
    } catch (error) {
      console.error('‚ùå Erro ao processar relat√≥rio mensal:', error)
    }
  }

  /**
   * Limpa logs antigos (mais de 30 dias)
   */
  private async cleanupOldLogs(): Promise<void> {
    try {
      const thirtyDaysAgo = new Date()
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)
      
      console.log(`üóëÔ∏è Iniciando limpeza de logs anteriores a ${thirtyDaysAgo.toLocaleDateString('pt-BR')}...`)
      
      // Contar logs antes da limpeza
      const totalLogsBefore = await databaseService.countMonitoringLogs()
      console.log(`üìä Total de logs antes da limpeza: ${totalLogsBefore}`)
      
      // Limpar logs de monitoramento antigos
      const deletedCount = await databaseService.deleteOldMonitoringLogs(thirtyDaysAgo)
      
      const totalLogsAfter = await databaseService.countMonitoringLogs()
      console.log(`üìä Total de logs ap√≥s a limpeza: ${totalLogsAfter}`)
      console.log(`üóëÔ∏è Logs removidos: ${deletedCount}`)
      
      console.log('‚úÖ Limpeza de logs conclu√≠da com sucesso')
    } catch (error) {
      console.error('‚ùå Erro na limpeza de logs:', error)
    }
  }

  /**
   * Agenda um relat√≥rio personalizado
   */
  async scheduleCustomReport(
    jobId: string,
    cronExpression: string,
    monitorId: string,
    email: string,
    includePdf: boolean = true
  ): Promise<{ success: boolean; message: string }> {
    try {
      // Validar express√£o cron
      if (!cron.validate(cronExpression)) {
        return {
          success: false,
          message: 'Express√£o cron inv√°lida'
        }
      }

      // Remover job existente se houver
      if (this.jobs.has(jobId)) {
        this.jobs.get(jobId)?.stop()
        this.jobs.delete(jobId)
      }

      // Criar novo job
      const task = cron.schedule(cronExpression, async () => {
        console.log(`üìä Executando relat√≥rio personalizado: ${jobId}`)
        
        const now = new Date()
        const month = now.getMonth() + 1
        const year = now.getFullYear()
        
        try {
          const result = await reportService.sendMonthlyReport(
            monitorId,
            email,
            year,
            month,
            includePdf
          )
          
          if (result.success) {
            console.log(`‚úÖ Relat√≥rio personalizado ${jobId} enviado com sucesso`)
          } else {
            console.error(`‚ùå Erro no relat√≥rio personalizado ${jobId}:`, result.message)
          }
        } catch (error) {
          console.error(`‚ùå Erro ao executar relat√≥rio personalizado ${jobId}:`, error)
        }
      }, {
        scheduled: true,
        timezone: 'America/Sao_Paulo'
      })

      this.jobs.set(jobId, task)
      
      return {
        success: true,
        message: `Relat√≥rio personalizado ${jobId} agendado com sucesso`
      }
    } catch (error) {
      console.error('‚ùå Erro ao agendar relat√≥rio personalizado:', error)
      return {
        success: false,
        message: `Erro ao agendar relat√≥rio: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
      }
    }
  }

  /**
   * Remove um job agendado
   */
  removeScheduledJob(jobId: string): boolean {
    const job = this.jobs.get(jobId)
    if (job) {
      job.stop()
      this.jobs.delete(jobId)
      console.log(`üìÖ Job ${jobId} removido`)
      return true
    }
    return false
  }

  /**
   * Lista todos os jobs ativos
   */
  getActiveJobs(): string[] {
    return Array.from(this.jobs.keys())
  }

  /**
   * Lista todos os jobs com detalhes
   */
  listJobs(): Array<{ id: string; name: string; status: string }> {
    return Array.from(this.jobs.entries()).map(([jobId, _]) => ({
      id: jobId,
      name: jobId,
      status: 'scheduled' // node-cron n√£o possui propriedade 'running'
    }))
  }

  /**
   * Reagenda relat√≥rio para um monitor espec√≠fico (usado quando configura√ß√µes s√£o alteradas)
   */
  async rescheduleMonitorReport(monitorId: string): Promise<void> {
    try {
      const monitor = await databaseService.getMonitorById(monitorId)

      const jobName = `monthly-report-${monitorId}`

      // Se n√£o existir monitor, apenas remove o job (se houver)
      if (!monitor) {
        if (this.jobs.has(jobName)) {
          this.jobs.get(jobName)?.stop()
          this.jobs.delete(jobName)
          console.log(`üìÖ Job removido para monitor inexistente ${monitorId}`)
        }
        return
      }

      // Se configura√ß√£o estiver completa, reagendar
      if (monitor.report_email && monitor.report_send_day && monitor.report_send_time) {
        await this.scheduleMonitorReport(monitor)
        return
      }

      // Caso contr√°rio, remover job existente
      if (this.jobs.has(jobName)) {
        this.jobs.get(jobName)?.stop()
        this.jobs.delete(jobName)
        console.log(`üìÖ Job removido para monitor ${monitor.name} (${monitorId}) por aus√™ncia de configura√ß√£o`)
      }
    } catch (error) {
      console.error(`‚ùå Erro ao reagendar job do monitor ${monitorId}:`, error)
    }
  }

  /**
   * Para todos os jobs e limpa o servi√ßo
   */
  shutdown(): void {
    console.log('üìÖ Parando servi√ßo de agendamento...')
    
    for (const [jobId, job] of this.jobs) {
      job.stop()
      console.log(`üìÖ Job ${jobId} parado`)
    }
    
    this.jobs.clear()
    this.isInitialized = false
    
    console.log('üìÖ Servi√ßo de agendamento parado')
  }

  /**
   * For√ßa execu√ß√£o imediata da verifica√ß√£o de relat√≥rios mensais
   */
  async triggerMonthlyReportsCheck(): Promise<void> {
    console.log('üöÄ Executando verifica√ß√£o de relat√≥rios mensais manualmente...')
    // M√©todo n√£o implementado - usar scheduleIndividualMonitorReports
    await this.scheduleIndividualMonitorReports()
  }

  /**
   * For√ßa a execu√ß√£o da verifica√ß√£o de relat√≥rios mensais
   */
  async forceCheckMonthlyReports(): Promise<void> {
    console.log('üîÑ For√ßando verifica√ß√£o manual de relat√≥rios mensais...')
    const startTime = Date.now()
    
    try {
      // Usar m√©todo existente para verificar relat√≥rios individuais
      await this.scheduleIndividualMonitorReports()
      const duration = Date.now() - startTime
      console.log(`‚úÖ Verifica√ß√£o manual conclu√≠da em ${duration}ms`)
    } catch (error) {
      const duration = Date.now() - startTime
      console.error(`‚ùå Erro na verifica√ß√£o manual ap√≥s ${duration}ms:`, error)
      throw error
    }
  }
}

export const schedulerService = new SchedulerService()